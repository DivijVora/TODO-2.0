import express from 'express';
import jwt from 'jsonwebtoken';
import { ObjectId } from 'mongodb';

const router = express.Router();

// Middleware to verify JWT
function authenticateToken(req, res, next) {
  const token = req.headers['authorization']?.split(' ')[1]; // Bearer TOKEN
  
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid token' });
    }
    req.userId = user.userId;
    next();
  });
}

// PATCH /api/todolist
router.patch('/todolist', authenticateToken, async (req, res) => {
  try {
    const { lists, settings } = req.body;
    
      let createdLists = [];
      // Process list operations
    if (lists) {
      for (const operation of lists) {
        if (operation.action === 'add') {
          const result = await req.db.collection('lists').insertOne({
            ...operation.list,
            user_id: req.userId
          });
          // Get the newly created list
          const newList = await req.db.collection('lists').findOne({
            _id: result.insertedId
          });
          createdLists.push(newList);
        }
        // Append a single todo item to the end of the list array.
        // Client should send: { action: 'add-item', listId, changes: { task, completed, ... } }
        if (operation.action === 'add-item') {
          // Generate a unique ID for the new item using timestamp and random number
          const newItemId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
          const itemToAdd = {
            ...operation.changes,
            id: newItemId
          };
          
          await req.db.collection('lists').updateOne(
            { _id: new ObjectId(operation.listId), user_id: req.userId },
            { $push: { list: itemToAdd } }
          );
          
          // Return the newly created item
          createdLists.push({
            _id: operation.listId,
            item: itemToAdd
          });
        }
        
        if (operation.action === 'update') {
           // Extract listId and index from the composite id
           const { changes } = operation;
           if (changes.list) {
             // Normalize the list items before update to store only the base fields
             const normalizedList = changes.list.map(item => ({
               task: item.task,
               completed: item.completed,
               priority: item.priority,
               starred: item.starred,
               due_date: item.due_date,
               due_time: item.due_time
             }));
           
          await req.db.collection('lists').updateOne(
            { _id: new ObjectId(operation.listId), user_id: req.userId },
              { $set: { list: normalizedList } }
          );
           }
        }
        
        if (operation.action === 'delete-item') {
          // Expect operation.changes.itemId to be the composite id generated by GET, e.g. '<listId>-<index>'
          const compositeId = operation.changes?.itemId;
          if (compositeId) {
            const parts = compositeId.split('-');
            const idx = parseInt(parts[parts.length - 1], 10);
            if (!isNaN(idx) && idx > 0) {
              const listDoc = await req.db.collection('lists').findOne({ _id: new ObjectId(operation.listId), user_id: req.userId });
              if (listDoc) {
                const newList = Array.isArray(listDoc.list) ? [...listDoc.list] : [];
                // index is 1-based in composite id
                if (idx - 1 >= 0 && idx - 1 < newList.length) {
                  newList.splice(idx - 1, 1);
                  await req.db.collection('lists').updateOne(
                    { _id: new ObjectId(operation.listId), user_id: req.userId },
                    { $set: { list: newList } }
                  );
                }
              }
            }
          }
        }

        if (operation.action === 'delete') {
          await req.db.collection('lists').deleteOne({
            _id: new ObjectId(operation.listId),
            user_id: req.userId
          });
        }
      }
    }
    
    // Update settings if provided
    if (settings) {
      await req.db.collection('users').updateOne(
        { _id: new ObjectId(req.userId) },
        { $set: { settings } }
      );
    }
    
    res.json({ 
      success: true, 
      timestamp: new Date(),
      lists: createdLists
    });
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/todolist
router.get('/todolist', authenticateToken, async (req, res) => {
  try {
    const lists = await req.db.collection('lists')
      .find({ user_id: req.userId })
      // Sort by title to ensure consistent order
      .sort({ title: 1 })
      // Add projection to ensure we only get necessary fields
      .project({
        _id: 1,
        title: 1,
        list: 1
      })
      .toArray();
    
    // Process list items to ensure unique IDs
    const processedLists = lists.map(list => ({
      ...list,
      list: list.list.map((item, index) => ({
        ...item,
        // Ensure unique IDs by combining list ID and index
        id: `${list._id}-${index + 1}`
      }))
    }));
    
    res.json({ lists: processedLists });
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/settings
router.get('/settings', authenticateToken, async (req, res) => {
  try {
    const user = await req.db.collection('users').findOne(
      { _id: new ObjectId(req.userId) },
      { projection: { settings: 1 } }
    );
    
    res.json(user?.settings || {});
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// PUT /api/settings
router.put('/settings', authenticateToken, async (req, res) => {
  try {
    await req.db.collection('users').updateOne(
      { _id: new ObjectId(req.userId) },
      { $set: { settings: req.body } }
    );
    
    res.json({ success: true });
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;